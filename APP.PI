(import streamlit as st
import pandas as pd
from datetime import datetime

# Example: import your Elo functions
from elo import calculate_elo, predict_margin

# --- Sidebar Inputs ---
st.sidebar.title("Settings")
sport = st.sidebar.selectbox("Select Sport", ["NFL", "NCAAF"])
bankroll = st.sidebar.number_input("Bankroll ($)", min_value=0, value=1000)
fractional_kelly = st.sidebar.slider("Fractional Kelly", 0.1, 1.0, 0.5)
base_elo = st.sidebar.number_input("Base Elo", 1000, 2000, 1500)
k_factor = st.sidebar.number_input("K-Factor", 1, 50, 20)

# API keys (already in secrets)
odds_api_key = st.secrets["THE_ODDS_API_KEY"]
weather_api_key = st.secrets.get("WEATHER_API_KEY", None)

# --- Fetch Odds ---
@st.cache_data(ttl=3600)
def fetch_odds(sport):
    # Replace with actual The Odds API call
    # Should return a DataFrame with columns:
    # home_team, away_team, game_time, moneyline_home, moneyline_away,
    # spread_home, spread_away, total_points
    return pd.DataFrame()  # placeholder

odds_df = fetch_odds(sport)

# --- Fetch Weather (optional) ---
def fetch_weather(venue):
    if not weather_api_key:
        return None
    # Use API call to get wind, rain, temp
    return {"temp": 70, "wind": 5, "rain": 0}

# --- Fetch Injuries (optional) ---
def fetch_injuries(team):
    # Return a list of injured key players
    return []

# --- Predict and calculate edges ---
recommendations = []

for index, row in odds_df.iterrows():
    home = row["home_team"]
    away = row["away_team"]
    game_time = row["game_time"]
    
    # Get weather
    weather = fetch_weather(row.get("venue", ""))
    
    # Get injuries
    home_injuries = fetch_injuries(home)
    away_injuries = fetch_injuries(away)
    
    # Predict probabilities and expected margin using Elo
    home_elo, away_elo = calculate_elo(home, away, base_elo)
    predicted_margin = predict_margin(home_elo, away_elo)
    
    # Adjust margin for injuries/home/away/weather
    if len(home_injuries) > 0:
        predicted_margin -= 3  # simple penalty
    if len(away_injuries) > 0:
        predicted_margin += 3
    if weather:
        if weather["rain"] > 0 or weather["wind"] > 20:
            predicted_margin *= 0.9  # adjust total scoring
    
    # --- Moneyline ---
    prob_home_win = 1 / (1 + 10 ** ((away_elo - home_elo)/400))
    implied_home = 1 / (row["moneyline_home"]/100 if row["moneyline_home"] > 0 else -100/row["moneyline_home"])
    edge_home_ml = prob_home_win - implied_home
    
    prob_away_win = 1 - prob_home_win
    implied_away = 1 / (row["moneyline_away"]/100 if row["moneyline_away"] > 0 else -100/row["moneyline_away"])
    edge_away_ml = prob_away_win - implied_away
    
    # --- Spread ---
    edge_home_spread = predicted_margin - row["spread_home"]
    edge_away_spread = -predicted_margin - row["spread_away"]
    
    # --- Over/Under ---
    predicted_total = home_elo/10 + away_elo/10  # example formula
    over_under_edge = predicted_total - row["total_points"]
    
    # Pick best bet
    edges = {
        "ML Home": edge_home_ml,
        "ML Away": edge_away_ml,
        "Spread Home": edge_home_spread,
        "Spread Away": edge_away_spread,
        "Over": over_under_edge,
        "Under": -over_under_edge
    }
    best_bet_type = max(edges, key=edges.get)
    best_edge = edges[best_bet_type]
    stake = bankroll * fractional_kelly * max(0, best_edge)  # fractional Kelly
    
    recommendations.append({
        "Game": f"{away} @ {home}",
        "Home": home,
        "Away": away,
        "Time": game_time,
        "Weather": weather,
        "Best Bet Type": best_bet_type,
        "Edge %": round(best_edge*100,2),
        "Stake $": round(stake,2)
    })

# --- Display Recommendations ---
rec_df = pd.DataFrame(recommendations)
st.subheader("Recommended Bets")
st.dataframe(rec_df)

# --- Log Bets ---
log_file = "bets_log.csv"
try:
    existing_log = pd.read_csv(log_file)
    updated_log = pd.concat([existing_log, rec_df])
except FileNotFoundError:
    updated_log = rec_df

updated_log.to_csv(log_file, index=False)
st.success(f"{len(rec_df)} bets logged to {log_file}")